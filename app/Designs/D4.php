<?php

namespace App\Designs;

class D4 extends Design
{
    protected function getPoints()
    {
        try {
            $w = $this->lengths['w'];
            $h = $this->lengths['h'];
            $l = $this->lengths['l'];
        } catch (\Exception $exception) {
            throw new \Exception('参数不正确，无法生成');
        }
        if (($w + 2 * $h + 28) <= 144 && ($l + 2 * $h + 28) <= 144) {
            if ($w > $l) {
                list($w, $l) = [$l, $w];
            }
            return $this->p1($w, $h, $l);
        } elseif (($w + 2 * $h + 28) <= 144 && ($l + 2 * $h + 28) > 144) {
            list($w, $l) = [$l, $w];
            return $this->p1($w, $h, $l);
        } elseif (($w + 2 * $h + 28) > 144 && ($l + 2 * $h + 28) <= 144) {
            return $this->p1($w, $h, $l);
        } elseif (($w + 2 * $h + 28) > 144 && ($l + 2 * $h + 28) > 144) {
            if (($w + $h + 16) > 144 && ($l + $h + 16) <= 144) {
                if (($w + 2) > 144) {
                    return $this->p4($w, $h, $l);
                }else {
                    return $this->p3($w, $h, $l);
                }
            } elseif (($w + $h + 16) <= 144 and ($l + $h + 16) > 144) {
                list($w, $l) = [$l, $w];
                if ($l > 141) {
                    return $this->p4($w, $h, $l);
                } else {
                    return $this->p3($w, $h, $l);
                }
            } elseif (($w + $h + 16) <= 144 && ($l + $h + 16) <= 144) {
                if ($w > $l) {
                    list($w, $l) = [$l, $w];
                }
                return $this->p3($w, $h, $l);
            } elseif (($w + 2) + ($h + 13) > 144 && ($l + 2) + ($h + 13) > 144) {
                if (($l < $w) && (($w + 3) <= 144)) {
                    list($w, $l) = [$l, $w];
                    if ((2 * ($l + 2)) <= 144) {
                        return $this->p7($w, $h, $l);
                    } else {
                        return $this->p5($w, $h, $l);
                    }
                } elseif (($w > 141) && ($l <= 141)) {
                    return $this->p6($w, $h, $l);
                } elseif (($w >= $l) && $l > 141) {
                    throw new \Exception('你提供的尺寸暂时无法定做！');
                } elseif (($l >= $w) && $w > 141) {
                    throw new \Exception('你提供的尺寸暂时无法定做！');
                } elseif (($w < $l) && $l <= 141) {
                    if (2 * ($w + 2) <= 144) {
                        return $this->p7($w, $h, $l);
                    } else {
                        return $this->p5($w, $h, $l);
                    }
                } elseif ($l > 141 && $w <= 141) {
                    list($w, $l) = [$l, $w];
                    return $this->p6($w, $h, $l);
                } else {
                    return $this->p5($w, $h, $l);
                }
            }
        }
        throw new \Exception('你提供的尺寸暂时无法定做！');
    }

    protected function p1 ($w, $h, $l) {
        return [
            [$h + 13, 0],
            [$h + 15 + $w, 0],
            [$h + 15 + $w, $h + 13],
            [2 * $h + 28 + $w, $h + 13],
            [2 * $h + 28 + $w, $h + 15 + $l],
            [$h + 15 + $w, $h + 15 + $l],
            [$h + 15 + $w, 2 * $h + 28 + $l],
            [$h + 13, 2 * $h + 28 + $l],
            [$h + 13, $h + 15 + $l],
            [0, $h + 15 + $l],
            [0, $h + 13],
            [$h + 13, $h + 13],
            [$h + 13, 0]
        ];
    }

    protected function p3 ($w, $h, $l) {
        return [
            [0, 2],
            [$h + 13, 2],
            [$h + 13, 0],
            [$h + 14, 0],
            [$h + 14, 1],
            [$h + 15 + $w, 1],
            [$h + 15 + $w, 2],
            [2 * $h + $w + 28, 2],
            [2 * $h + $w + 28, 0],
            [3 * $h + $w + 42, 0],
            [3 * $h + $w + 42, $w + 1],
            [3 * $h + $w + 43, $w + 1],
            [3 * $h + $w + 43, $w + 2],
            [2 * $h + $w + 28, $w + 2],
            [2 * $h + $w + 28, 2],
            [2 * $h + $w + 28, $l + 4],
            [$h + $w + 15, $l + 4],
            [$h + $w + 15, $l + 17 + $h],
            [$h + 13, $l + 17 + $h],
            [$h + 13, $l + 4],
            [0, $l + 4],
            [0, 2]
        ];
    }

    protected function p4 ($w, $h, $l) {
        return [
            [0, 2],
            [$h + 13, 2],
            [$h + 13, 0],
            [$h + 14, 0],
            [$h + 14, 1],
            [$h + 15 + $w, 1],
            [$h + 15 + $w, 2],
            [2 * $h + $w + 28, 2],
            [2 * $h + $w + 28, 0],
            [2 * $h + 2 * $w + 30, 0],
            [2 * $h + 2 * $w + 30, $h + 14],
            [2 * $h + $w + 29, $h + 14],
            [2 * $h + $w + 29, $h + 15],
            [2 * $h + $w + 28, $h + 15],
            [2 * $h + $w + 28, 2],
            [2 * $h + $w + 28, $h + 15],
            [2 * $h + $w + 28, $l + 4],
            [$h + $w + 15, $l + 4],
            [$h + $w + 15, $l + 17 + $h],
            [$h + 13, $l + 17 + $h],
            [$h + 13, $l + 4],
            [0, $l + 4],
            [0, 2]
        ];
    }

    protected function p5 ($w, $h, $l) {
        return [
            [0, 2],
            [$h + 13, 2],
            [$h + 13, 0],
            [$h + 14, 0],
            [$h + 14, 1],
            [$h + 15 + $w, 1],
            [$h + 15 + $w, 2],
            [2 * $h + $w + 28, 2],
            [2 * $h + $w + 28, 0],
            [3 * $h + $w + 42, 0],
            [3 * $h + $w + 42, $w + 1],
            [3 * $h + $w + 43, $w + 1],
            [3 * $h + $w + 43, 0],
            [4 * $h + $w + 57, 0],
            [4 * $h + $w + 57, $w + 1],
            [4 * $h + $w + 58, $w + 1],
            [4 * $h + $w + 58, $w + 2],
            [3 * $h + $w + 43, $w + 2],
            [3 * $h + $w + 43, $w + 1],
            [3 * $h + $w + 43, $w + 2],
            [2 * $h + $w + 28, $w + 2],
            [2 * $h + $w + 28, $l + 4],
            [2 * $h + $w + 28, 2],
            [2 * $h + $w + 28, $l + 4],
            [$h + $w + 15, $l + 4],
            [$h + $w + 15, $l + 6],
            [$h + 14 + $w, $l + 6],
            [$h + 14 + $w, $l + 5],
            [$h + 13, $l + 5],
            [$h + 13, $l + 4],
            [0, $l + 4],
            [0, 2]
        ];
    }

    protected function p6 ($w, $h, $l) {
        return [
            [0, 2],
            [$h + 13, 2],
            [$h + 13, 0],
            [$h + 14, 0],
            [$h + 14, 1],
            [$h + 15 + $w, 1],
            [$h + 15 + $w, 2],
            [2 * $h + $w + 28, 2],
            [2 * $h + $w + 28, 0],
            [2 * $h + 2 * $w + 30, 0],
            [2 * $h + 2 * $w + 30, $h + 14],
            [2 * $h + $w + 29, $h + 14],
            [2 * $h + $w + 29, $h + 15],
            [2 * $h + $w + 28, $h + 15],
            [2 * $h + $w + 28, 2],
            [2 * $h + $w + 28, $h + 15],
            [2 * $h + $w + 29, $h + 15],
            [2 * $h + 2 * $w + 30, $h + 15],
            [2 * $h + 2 * $w + 30, 2 * $h + 29],
            [2 * $h + $w + 29, 2 * $h + 29],
            [2 * $h + $w + 29, 2 * $h + 30],
            [2 * $h + $w + 28, 2 * $h + 30],
            [2 * $h + $w + 28, $h + 15],
            [2 * $h + $w + 28, 2 * $h + 30],
            [2 * $h + $w + 28, $l + 4],
            [$h + $w + 15, $l + 4],
            [$h + $w + 15, $l + 6],
            [$h + 14 + $w, $l + 6],
            [$h + 14 + $w, $l + 5],
            [$h + 13, $l + 5],
            [$h + 13, $l + 4],
            [0, $l + 4],
            [0, 2]
        ];
    }

    protected function p7 ($w, $h, $l) {
        return [
            [0, 2],
            [$h + 13, 2],
            [$h + 13, 0],
            [$h + 14, 0],
            [$h + 14, 1],
            [$h + 15 + $w, 1],
            [$h + 15 + $w, 2],
            [2 * $h + $w + 28, 2],
            [2 * $h + $w + 28, 0],
            [3 * $h + $w + 42, 0],
            [3 * $h + $w + 42, $w + 1],
            [3 * $h + $w + 43, $w + 1],
            [3 * $h + $w + 43, $w + 2],
            [2 * $h + $w + 28, $w + 2],
            [3 * $h + $w + 42, $w + 2],
            [3 * $h + $w + 42, 2 * $w + 3],
            [3 * $h + $w + 43, 2 * $w + 3],
            [3 * $h + $w + 43, 2 * $w + 4],
            [2 * $h + $w + 28, 2 * $w + 4],
            [2 * $h + $w + 28, 2],
            [2 * $h + $w + 28, $l + 4],
            [$h + $w + 15, $l + 4],
            [$h + $w + 15, $l + 6],
            [$h + 14 + $w, $l + 6],
            [$h + 14 + $w, $l + 5],
            [$h + 13, $l + 5],
            [$h + 13, $l + 4],
            [0, $l + 4],
            [0, 2]
        ];
    }

}
